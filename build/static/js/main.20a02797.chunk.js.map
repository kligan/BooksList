{"version":3,"sources":["component/Title/title.js","component/list.js","component/paginate.js","component/users.js","store/actions/usersAction.js","App.js","serviceWorker.js","store/reducers/usersReducer.js","store/reducers/index.js","index.js"],"names":["useStyles","makeStyles","theme","root","color","Title","props","classes","Box","component","m","className","data-testid","title","Typography","variant","gutterBottom","width","maxWidth","textAlign","backgroundColor","divPosition","alignItems","display","justifyContent","marginBottom","ListItemBooks","List","aria-label","ListItem","button","ListItemText","primary","name","Paginate","pageCount","handleClick","previousLabel","nextLabel","breakLabel","breakClassName","onPageChange","marginPagesDisplayed","pageRangeDisplayed","containerClassName","subContainerClassName","activeClassName","users","state","currentPage","data","bind","this","getBooks","setState","selectedPage","selected","offset","currentPageData","slice","map","index","Fragment","key","id","book_pages","book_title","Math","ceil","length","Component","connect","dispatch","a","axios","post","res","type","arr","books","App","useState","loading","setLoading","useEffect","setTimeout","size","Boolean","window","location","hostname","match","initialState","combineReducers","action","middleware","thunk","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.20a02797.chunk.js","sourcesContent":["import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport {makeStyles} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        color: '#d7aa71',\r\n    }\r\n}));\r\n\r\nconst Title = (props) =>{\r\n    const classes = useStyles();\r\n    return (\r\n        <div>\r\n            <Box component=\"span\" m={1} className={classes.root}>\r\n                <h1 data-testid=\"title\" >{props.title}</h1>\r\n                <Typography variant=\"h4\" component=\"h1\" gutterBottom>\r\n                   Books with Title.\r\n                </Typography>\r\n            </Box>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Title;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        textAlign: 'center',\r\n        backgroundColor: '#ffffff',\r\n    },\r\n    divPosition:{\r\n        alignItems: 'center',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        marginBottom: '3px'\r\n    }\r\n}));\r\nconst ListItemBooks = (props) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.divPosition}>\r\n            <List component=\"div\" className={classes.root} aria-label=\"mailbox folders\">\r\n                <ListItem alignItems=\"center\" button>\r\n                    <ListItemText primary={props.name} />\r\n                </ListItem>\r\n            </List>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ListItemBooks;","import React from 'react';\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nconst Paginate=(props)=> {\r\n    const {pageCount,handleClick} = props;\r\n\r\n    return (\r\n        <div>\r\n            <ReactPaginate\r\n                previousLabel={\"Back\"}\r\n                nextLabel={\"Next\"}\r\n                breakLabel={\"...\"}\r\n                breakClassName={\"break-me\"}\r\n                pageCount={pageCount}\r\n                onPageChange={handleClick}\r\n                marginPagesDisplayed={2}\r\n                pageRangeDisplayed={5}\r\n                containerClassName={\"pagination\"}\r\n                subContainerClassName={\"pages pagination\"}\r\n                activeClassName={\"active\"}\r\n                />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Paginate;\r\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport {getBooks} from '../store/actions/usersAction';\nimport Title from './Title/title';\nimport ListItems from './list';\nimport Paginate from './paginate'\n\nclass users extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentPage: 0,\n            data: []\n        };\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    componentDidMount(){\n        this.props.getBooks()\n        this.setState({data: this.props.users})\n    }\n\n    handleClick({selected: selectedPage}){\n\n        this.setState({currentPage: selectedPage})\n            // this.props.history.push({\n            //     pathname: \"/\",\n            //     search: \"?page=\" + selectedPage\n            // });\n    }\n\n    render() {\n        const PER_PAGE = 6;\n        const {users} = this.props.users;\n        const offset = this.state.currentPage * PER_PAGE;\n\n        const currentPageData = users.slice(offset, offset + PER_PAGE).map(index =>\n            <React.Fragment key={index.id}>\n                <ListItems id={index.book_pages} name={index.book_title}/>\n            </React.Fragment>);\n\n        const pageCount = Math.ceil(users.length / PER_PAGE);\n\n        return (\n            <div>\n                <Title title=\"BOOKS\"/>\n                <Paginate pageCount={pageCount} handleClick={this.handleClick}/>\n                {currentPageData}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps  = (state) => ({users:state.users})\n\nexport default connect(mapStateToProps, {getBooks})(users)","import axios from 'axios'\n\nexport const getBooks = () => async dispatch => {\n        const res = await axios.post(`https://cors-anywhere.herokuapp.com/http://nyx.vima.ekt.gr:3000/api/books`)\n        dispatch( {\n            type: 'GET_BOOKS',\n            arr: res.data.books\n        })\n}","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Users from './component/users';\nimport PacmanLoader from 'react-spinners/PacmanLoader'\n\n\nfunction App() {\n    const [loading, setLoading] = useState(false);\n\n    useEffect(()=>{\n        setLoading(true);\n        setTimeout(()=>{\n            setLoading(false);\n        },3000)\n    },[])\n  return (\n    <div className=\"App\">\n        {\n            loading ? (\n                <PacmanLoader size={50} color={\"#e2af74\"} loading={loading} />\n            ) : (\n         <Users/>\n            )\n        }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n    users:[],\n}\n\nexport default function(state = initialState, action){\n\n    if (action.type === 'GET_BOOKS'){\n        return {\n            ...state,\n            users:action.arr,\n        }\n    }\n    else{\n        return state\n    }\n\n}","import { combineReducers } from 'redux'\nimport userReducer from './usersReducer'\n\nexport default combineReducers({\n  users: userReducer\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore, applyMiddleware} from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './store/reducers'\nimport {Provider} from 'react-redux';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\n\n\nconst middleware = [thunk]\nconst store = createStore(rootReducer,  applyMiddleware(...middleware))\n\nReactDOM.render(\n      <React.StrictMode>\n        <Provider store={store}>\n          <Router>\n            <App />\n          </Router>\n        </Provider>\n      </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}